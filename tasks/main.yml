---

- name: Gather master facts
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups[kubernetes_ansible_master_group] }}"

- name: Gather router facts
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups[kubernetes_ansible_router_group] }}"

- name: Deploy ServiceAccount
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: calico-node
        namespace: kube-system

- name: Deploy Custom resource definitions
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    src: "calico-crds.yaml"
    apply: yes

- name: Deploy Cluster role
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition:
      kind: ClusterRole
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: calico-node
      rules:
        # The CNI plugin needs to get pods, nodes, and namespaces.
        - apiGroups: [""]
          resources:
            - pods
            - nodes
            - namespaces
          verbs:
            - get
        # EndpointSlices are used for Service-based network policy rule
        # enforcement.
        - apiGroups: [ "discovery.k8s.io" ]
          resources:
            - endpointslices
          verbs:
            - watch
            - list
        - apiGroups: [ "" ]
          resources:
            - endpoints
            - services
          verbs:
            # Used to discover service IPs for advertisement.
            - watch
            - list
            # Used to discover Typhas.
            - get
        # Pod CIDR auto-detection on kubeadm needs access to config maps.
        - apiGroups: [ "" ]
          resources:
            - configmaps
          verbs:
            - get
        - apiGroups: [ "" ]
          resources:
            - nodes/status
          verbs:
            # Needed for clearing NodeNetworkUnavailable flag.
            - patch
            # Calico stores some configuration information in node annotations.
            - update
        # Watch for changes to Kubernetes NetworkPolicies.
        - apiGroups: [ "networking.k8s.io" ]
          resources:
            - networkpolicies
          verbs:
            - watch
            - list
        # Used by Calico for policy information.
        - apiGroups: [ "" ]
          resources:
            - pods
            - namespaces
            - serviceaccounts
          verbs:
            - list
            - watch
        # The CNI plugin patches pods/status.
        - apiGroups: [ "" ]
          resources:
            - pods/status
          verbs:
            - patch
        # Calico monitors various CRDs for config.
        - apiGroups: [ "crd.projectcalico.org" ]
          resources:
            - globalfelixconfigs
            - felixconfigurations
            - bgppeers
            - globalbgpconfigs
            - bgpconfigurations
            - ippools
            - ipreservations
            - ipamblocks
            - globalnetworkpolicies
            - globalnetworksets
            - networkpolicies
            - networksets
            - clusterinformations
            - hostendpoints
            - blockaffinities
            - caliconodestatuses
          verbs:
            - get
            - list
            - watch
        # Calico must create and update some CRDs on startup.
        - apiGroups: [ "crd.projectcalico.org" ]
          resources:
            - ippools
            - felixconfigurations
            - clusterinformations
          verbs:
            - create
            - update
        # Calico must update some CRDs.
        - apiGroups: [ "crd.projectcalico.org" ]
          resources:
            - caliconodestatuses
          verbs:
            - update
        # Calico stores some configuration information on the node.
        - apiGroups: [ "" ]
          resources:
            - nodes
          verbs:
            - get
            - list
            - watch
        # These permissions are only required for upgrade from v2.6, and can
        # be removed after upgrade or on fresh installations.
        - apiGroups: [ "crd.projectcalico.org" ]
          resources:
            - bgpconfigurations
            - bgppeers
          verbs:
            - create
            - update
        # These permissions are required for Calico CNI to perform IPAM allocations.
        - apiGroups: [ "crd.projectcalico.org" ]
          resources:
            - blockaffinities
            - ipamblocks
            - ipamhandles
          verbs:
            - get
            - list
            - create
            - update
            - delete
        - apiGroups: [ "crd.projectcalico.org" ]
          resources:
            - ipamconfigs
          verbs:
            - get
        # Block affinities must also be watchable by confd for route aggregation.
        - apiGroups: [ "crd.projectcalico.org" ]
          resources:
            - blockaffinities
          verbs:
            - watch
        # The Calico IPAM migration needs to get daemonsets. These permissions can be
        # removed if not upgrading from an installation using host-local IPAM.
        - apiGroups: [ "apps" ]
          resources:
            - daemonsets
          verbs:
            - get

- name: Deploy Cluster Role Binding
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: calico-node
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: calico-node
      subjects:
      - kind: ServiceAccount
        name: calico-node
        namespace: kube-system
      - kind: User
        name: calico-node
        namespace: kube-system

- name: Deploy Typha service
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: calico-typha
        namespace: kube-system
        labels:
          k8s-app: calico-typha
      spec:
        type: ClusterIP
        ports:
          - port: 5473
            protocol: TCP
            targetPort: 5473
            name: calico-typha

- name: Create K8S Master node dummy objects
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition:
      apiVersion: v1
      kind: Node
      metadata:
        labels:
          beta.kubernetes.io/arch: amd64
          beta.kubernetes.io/os: linux
          kubernetes.io/arch: amd64
          kubernetes.io/hostname: "{{ hostvars[item]['ansible_fqdn'] }}"
          kubernetes.io/os: linux
        name: "{{ hostvars[item]['ansible_fqdn'] }}"
      spec:
        podCIDR: "{{ calico_kube_resources_master_dummy_subnet }}"
  with_items: "{{ groups[kubernetes_ansible_master_group] }}"

- name: Deploy Typha service endpoints
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition: "{{ lookup('template', 'typha-service-endpoints.yml.j2') }}"

- name: Add each router as BGP endpoint
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition:
      kind: BGPPeer
      metadata:
        name: "{{ hostvars[item]['ansible_fqdn'] }}"
      spec:
        peerIP: "{{ hostvars[item][hostvars[item]['calico_kube_resources_router_interface']]['ipv4']['address'] }}"
        asNumber: "{{ kubernetes_autonomous_system_number }}"
  with_items: "{{ groups[kubernetes_ansible_router_group] }}"

- name: Add default BGP configuration
  local_action:
    module: kubernetes.core.k8s
    state: "{{ calico_kube_resources_state }}"
    kubeconfig: "{{ calico_kube_resources_kubeconfig }}"
    definition:
      kind: BGPConfiguration
      metadata:
        name: default
      spec:
        nodeToNodeMeshEnabled: false
        serviceClusterIPs:
          - cidr: "{{ kubernetes_service_cidr }}"
        asNumber: "{{ kubernetes_autonomous_system_number }}"
